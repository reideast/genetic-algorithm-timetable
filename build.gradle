import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")

        // https://mvnrepository.com/artifact/org.yaml/snakeyaml
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.23'
    }
}

plugins {
    id 'java'
    id 'idea'
    id "org.springframework.boot" version "2.1.3.RELEASE"
    /*
    The Spring Boot gradle plugin provides many convenient features:
        https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html
        It collects all the jars on the classpath and builds a single, runnable "uber-jar", which makes it more convenient to execute and transport your service.
        It searches for the public static void main() method to flag as a runnable class.
        It provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies. You can override any version you wish, but it will default to Bootâ€™s chosen set of versions.
     */
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
}

String appVersion = '0.7.0'
String appName = 'ga-rest-api'

group 'net.andreweast'
version appVersion

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar {
    baseName = appName
    version = version

    // Replace version within AWS Elastic Beanstalk config file, such that it will upload the correct JAR, See: https://stackoverflow.com/questions/17395787/how-to-replace-a-string-word-in-a-text-file-in-groovy#comment88039162_29393157
    doFirst {
        ant.replaceregexp(
            file: '.elasticbeanstalk/config.yml',
            match: 'ga-rest-api-[\\.\\d]+.jar',
            replace: "ga-rest-api-${appVersion}.jar"
        )
    }

    // bundle Elastic Beanstalk config files into the JAR
    from('.ebextensions') {
        include 'environmentvariables.config'
        include 'securitygroup-addexisting.config'
        into('.ebextensions')
    }
    inputs.files('.ebextensions') // Informs the JAR task that files in this directory should be considered inputs, thus the JAR must be rebuilt if they are modified

//    // copy all static web files into the JAR
//    from('static') {
//        include '**'
//        into('META-INF/resources')
//    }
//    inputs.files('static') // Informs the JAR task that files in this directory should be considered inputs, thus the JAR must be rebuilt if they are modified

    manifest {
        attributes(
            "Implementation-Title": appName,
            "Implementation-Version": version
        )
    }
}

repositories {
//    jcenter()
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.jayway.jsonpath:json-path')

    // See: https://www.baeldung.com/spring-boot-start
//    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

//    compile("org.springframework.boot:spring-boot-starter-security")
//    testCompile("org.springframework.security:spring-security-test")
    /*
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
     */

    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
//    compile("com.h2database:h2")
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'

    // "providedCompile and providedRuntime, analogous to compile and runtime in regular Java applications, to represent dependencies that are needed locally but should not be added to the generated webdemo.war file." https://guides.gradle.org/building-java-web-applications/
}

// For SpringBoot's bootRun that starts a server, load the .ebextensions YAML file as environmental variables first
bootRun {
    doFirst {
        def yamlFileContents = (".ebextensions/environmentvariables.config" as File).text
        def envs = new Yaml().load(yamlFileContents)["option_settings"]["aws:elasticbeanstalk:application:environment"] as Map<String, String>
        envs.each { key, value ->
            systemProperty key, value // Gradle's idiom for System.setProperty()

            if (key == "RDS_HOSTNAME") {
                println "POSTGRESQL HOSTNAME: Will be connecting to database: ${value}"
            }
        }
    }
}
