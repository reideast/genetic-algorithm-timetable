import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")

        // https://mvnrepository.com/artifact/org.yaml/snakeyaml
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.23'
    }
}

plugins {
    id 'java'
    id 'war' // TODO: test this: May not be needed because tomcat plugin uses WAR
    id 'idea'
    id "org.springframework.boot" version "2.1.3.RELEASE"
    /*
    The Spring Boot gradle plugin provides many convenient features:
        https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html
        It collects all the jars on the classpath and builds a single, runnable "über-jar", which makes it more convenient to execute and transport your service.
        It searches for the public static void main() method to flag as a runnable class.
        It provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies. You can override any version you wish, but it will default to Boot’s chosen set of versions.
     */
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
}

String appVersion = '0.4.0'

group 'net.andreweast'
version appVersion
//version '${appVersion}'

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar {
    baseName = 'ga-rest-api'
    version = appVersion
//    version = '${appVersion}'
}

repositories {
//    jcenter()
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.jayway.jsonpath:json-path')
    compile group: 'org.modelmapper', name: 'modelmapper', version: '2.3.2'

    // See: https://www.baeldung.com/spring-boot-start
//    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

//    compile("org.springframework.boot:spring-boot-starter-security")
//    testCompile("org.springframework.security:spring-security-test")
    /*
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
     */

    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
//    compile("com.h2database:h2")
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    implementation 'org.postgresql:postgresql:42.2.5' // DEBUG: Probably unnecessary now with Spring

    // "providedCompile and providedRuntime, analogous to compile and runtime in regular Java applications, to represent dependencies that are needed locally but should not be added to the generated webdemo.war file." https://guides.gradle.org/building-java-web-applications/
}

// For SpringBoot's bootRun that starts a server, load the .ebextensions YAML file as environmental variables first
bootRun {
    doFirst {
        def yamlFileContents = (".ebextensions/environmentvariables.config" as File).text
        def envs = new Yaml().load(yamlFileContents)["option_settings"]["aws:elasticbeanstalk:application:environment"] as Map<String, String>
        envs.each { key, value ->
            systemProperty key, value // Gradle's idiom for System.setProperty()
        }
    }
}

//war {
//    // bundle Elastic Beanstalk config files into the WAR
//    from('.ebextensions') {
//        include 'environmentvariables.config'
//        include 'securitygroup-addexisting.config'
//        into('.ebextensions')
//    }
//    inputs.files('.ebextensions') // Informs the WAR task that files in this directory should be considered inputs, thus the WAR must be rebuilt if they are modified
//}

bootJar {
    // bundle Elastic Beanstalk config files into the WAR
    from('.ebextensions') {
        include 'environmentvariables.config'
        include 'securitygroup-addexisting.config'
        into('.ebextensions')
    }
    inputs.files('.ebextensions') // Informs the WAR task that files in this directory should be considered inputs, thus the WAR must be rebuilt if they are modified
}
bootWar {
    // bundle Elastic Beanstalk config files into the WAR
    from('.ebextensions') {
        include 'environmentvariables.config'
        include 'securitygroup-addexisting.config'
        into('.ebextensions')
    }
    inputs.files('.ebextensions') // Informs the WAR task that files in this directory should be considered inputs, thus the WAR must be rebuilt if they are modified
}
