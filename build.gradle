import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")

        // https://mvnrepository.com/artifact/org.yaml/snakeyaml
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.23'
    }
}

plugins {
    id 'java'
    id 'idea'
    id "org.springframework.boot" version "2.1.3.RELEASE"
    /*
    The Spring Boot gradle plugin provides many convenient features:
        https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html
        It collects all the jars on the classpath and builds a single, runnable "uber-jar", which makes it more convenient to execute and transport your service.
        It searches for the public static void main() method to flag as a runnable class.
        It provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies. You can override any version you wish, but it will default to Bootâ€™s chosen set of versions.
     */
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
}

String appVersion = '0.7.0'
String appName = 'ga-rest-api'

group 'net.andreweast'
version appVersion

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar {
    baseName = appName
    version = version

    // Replace version within AWS Elastic Beanstalk config file, such that it will upload the correct JAR, See: https://stackoverflow.com/questions/17395787/how-to-replace-a-string-word-in-a-text-file-in-groovy#comment88039162_29393157
    doFirst {
        ant.replaceregexp(
            file: '.elasticbeanstalk/config.yml',
            match: 'ga-rest-api-[\\.\\d]+.jar',
            replace: "ga-rest-api-${appVersion}.jar"
        )
    }

    // bundle Elastic Beanstalk config files into the JAR
    from('.ebextensions') {
        include 'environmentvariables.config'
        include 'securitygroup-addexisting.config'
        into('.ebextensions')
    }
    inputs.files('.ebextensions') // Informs the JAR task that files in this directory should be considered inputs, thus the JAR must be rebuilt if they are modified

    manifest {
        attributes(
            "Implementation-Title": appName,
            "Implementation-Version": version
        )
    }
}

repositories {
//    jcenter()
    mavenCentral()
}

dependencies {
    // Spring Boot REST API
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile('com.jayway.jsonpath:json-path')

    // See: https://www.baeldung.com/spring-boot-start
    // See: https://spring.io/guides/gs/serving-web-content/
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")

    // Spring Boot Database
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'

    // Spring Boot Security
    compile("org.springframework.boot:spring-boot-starter-security")

    // REST Documentation
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
    testCompile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
}

def "load env variables from AWS EB YAML file"() {
    def yamlFileContents = (".ebextensions/environmentvariables.config" as File).text
    def envs = new Yaml().load(yamlFileContents)["option_settings"]["aws:elasticbeanstalk:application:environment"] as Map<String, String>
    envs.each { key, value ->
        systemProperty key, value // Gradle's idiom for System.setProperty()
//        System.setProperty(key, String.valueOf(value)) // Gradle's idiom for System.setProperty()
//        println "\"${key}=${value}\""

        if (key == "RDS_HOSTNAME") {
            println "POSTGRESQL HOSTNAME: Will be connecting to database: ${value}"
        }
    }
}

// For SpringBoot's bootRun that starts a server, load the .ebextensions YAML file as environmental variables first
bootRun {
    doFirst {
        "load env variables from AWS EB YAML file"()
    }
}

//test {
//    doFirst {
//        "load env variables from AWS EB YAML file"()
//
////        System.setProperty("server.port", System.getProperty("SERVER_PORT"))
////        System.setProperty("spring.datasource.url", "jdbc:postgresql://${System.getProperty('RDS_HOSTNAME')}:${System.getProperty('RDS_PORT')}/${System.getProperty('RDS_DB_NAME')}")
////        System.setProperty("spring.datasource.username", System.getProperty("RDS_USERNAME"))
////        System.setProperty("spring.datasource.password", System.getProperty("RDS_PASSWORD"))
//        System.setProperty("SERVER_PORT", System.getProperty("SERVER_PORT"))
//        System.setProperty("SPRING_DATASOURCE_URL", "jdbc:postgresql://${System.getProperty('RDS_HOSTNAME')}:${System.getProperty('RDS_PORT')}/${System.getProperty('RDS_DB_NAME')}")
//        System.setProperty("SPRING_DATASOURCE_USERNAME", System.getProperty("RDS_USERNAME"))
//        System.setProperty("SPRING_DATASOURCE_PASSWORD", System.getProperty("RDS_PASSWORD"))
//        println "\"${key}=${value}\""
//    }
//}
