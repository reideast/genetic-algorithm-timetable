import org.yaml.snakeyaml.Yaml

buildscript {
    dependencies {
        // https://mvnrepository.com/artifact/org.yaml/snakeyaml
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.23'
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'war' // TODO: test this: May not be needed because tomcat plugin uses WAR
    id 'org.gretty' version '2.2.0'
    // DEBUG: For tomcat plugin, not needed for gretty:
//    id "com.bmuschko.tomcat" version "2.5"
}

group 'net.andreweast'
version '0.2.1'

sourceCompatibility = 1.8

repositories {
    jcenter()
//    mavenCentral()
}

dependencies {
    // "providedCompile and providedRuntime, analogous to compile and runtime in regular Java applications, to represent dependencies that are needed locally but should not be added to the generated webdemo.war file." https://guides.gradle.org/building-java-web-applications/
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'


    compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.13'
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.glassfish.jersey.containers/jersey-container-servlet
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.28'
    // https://mvnrepository.com/artifact/org.glassfish.jersey.inject/jersey-hk2
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.28'

//    // For JSON
//    // DEBUG: doesn't seem to be needed
//    // https://mvnrepository.com/artifact/org.glassfish.jersey.media/jersey-media-json-jackson
//    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.28'

    compile 'org.postgresql:postgresql:42.2.5'

    // https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api
    compile group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
    // https://mvnrepository.com/artifact/javax.ejb/javax.ejb-api
    compile group: 'javax.ejb', name: 'javax.ejb-api', version: '3.2.2'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-core
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.1.Final'




    // DEBUG: For tomcat plugin, not needed for gretty:
//    def tomcatVersion = '8.5.16'
//    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
//        "org.apache.tomcat.embed:tomcat-embed-logging-juli:8.5.2",
//        "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
}

sourceSets {
    main {
        java {
            // https://stackoverflow.com/a/22164339/5271224
            srcDirs = []
//            srcDirs += ['src/main/groovy']
        }
        groovy {
            // do a co-compilation of java and groovy, so that they can depend on each other without circular dependencies
            // https://stackoverflow.com/a/22164339/5271224
            srcDirs += ['src/main/java']
//            srcDirs = []
        }
    }
}

// remove GroovyCompile->JavaCompile task dependencies
//// https://stackoverflow.com/a/22164339/5271224
//tasks.withType(GroovyCompile) {
//    dependsOn = []
//}
//// add JavaCompile->GroovyCompile task dependencies
//// https://stackoverflow.com/a/22164339/5271224
//tasks.withType(JavaCompile) { task ->
//    println "Task: ${task}"
//    println task.name.replace("Java", "Groovy")
//    dependsOn task.name.replace("Java", "Groovy")
//}

// DEBUG: For tomcat plugin, not needed for gretty:
//tomcat {
//    httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
//    ajpProtocol  = 'org.apache.coyote.ajp.AjpNio2Protocol'
//    contextPath = '/' // Otherwise, would run on localhost:8080/projectName/
//    users {
//        user {
//            username = 'user1'
//            password = '123456'
//            roles = ['developers', 'admin']
//        }
//
//        user {
//            username = 'user2'
//            password = 'abcdef'
//            roles = ['manager']
//        }
//    }
//}
// DEBUG: For tomcat plugin, not needed for gretty:
//tomcatRun {
//    daemon = false // TODO: turn to true if using tomcatStop
//    outputFile = file('logs/tomcat-log.log')
//}

gretty {
    contextPath = '/'
    servletContainer = 'tomcat85' // Match version running on AWS Elastic Beanstalk
    enableNaming = true // Required for JNDI lookups, such as java:comp/env/jdbc/postgresql. https://github.com/akhikhl/gretty/issues/64#issuecomment-57775698
    dependencies {

//    // https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2
//    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.6.0'
        // https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-dbcp
//    compile group: 'org.apache.tomcat', name: 'tomcat-dbcp', version: '8.5.30'
//    runtime group: 'org.apache.tomcat', name: 'tomcat-dbcp', version: '8.5.30'
        gretty group: 'org.apache.tomcat', name: 'tomcat-dbcp', version: '8.5.30'


//    implementation 'org.postgresql:postgresql:42.2.5'
//        compile 'org.postgresql:postgresql:42.2.5'
        gretty 'org.postgresql:postgresql:42.2.5'
    }
}

// For all of Gretty's appRun-type tasks, load the .ebextensions YAML file as environmental variables first
tasks.withType(org.akhikhl.gretty.AppStartTask) { Task task ->
    if (task.name in ['appRun', 'appStart', 'appRunWar', 'appStartWar']) {
        def yamlFileContents = (".ebextensions/environmentvariables.config" as File).text
        def envs = new Yaml().load(yamlFileContents)["option_settings"]["aws:elasticbeanstalk:application:environment"] as Map<String, String>
        envs.each { key, value ->
            systemProperty key, value // Gradle's idiom for System.setProperty()
        }
    }
}

war {
    // bundle Elastic Beanstalk config files into the WAR
    from('.ebextensions') {
        include 'environmentvariables.config'
        include 'securitygroup-addexisting.config'
        into('.ebextensions')
    }
    inputs.files('.ebextensions') // Informs the WAR task that files in this directory should be considered inputs, thus the WAR must be rebuilt if they are modified
}
