import org.yaml.snakeyaml.Yaml

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")

        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.23'
    }
}

plugins {
    id 'java'
    id 'idea'
    id "org.springframework.boot" version "2.1.3.RELEASE"
    /*
    The Spring Boot gradle plugin provides many convenient features:
        https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html
        It collects all the jars on the classpath and builds a single, runnable "uber-jar", which makes it more convenient to execute and transport your service.
        It searches for the public static void main() method to flag as a runnable class.
        It provides a built-in dependency resolver that sets the version number to match Spring Boot dependencies. You can override any version you wish, but it will default to Bootâ€™s chosen set of versions.
     */
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
}

String appVersion = '1.2.0'
String appName = 'ga-rest-api'

group 'net.andreweast'
version appVersion

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava {
    // Always run Webpack before a build
//    dependsOn 'webpack' // Gradle general note: if task is not in quotes, then it must come BEFORE this one in the file. If task is in quotes, Gradle will parse the entire file first before resolving task
    // Note: Putting this dependency on task bootJar would make race condition: dependsOn([jar, webpack]), meaning that the compiled JS/CSS files might be updated AFTER the jar is packaged
    //       The same logic applies to bootRun, and compileJava is a dependency for both
}

bootJar {
    baseName = appName
    version = version

    // Replace version within AWS Elastic Beanstalk config file, such that it will upload the correct JAR, See: https://stackoverflow.com/questions/17395787/how-to-replace-a-string-word-in-a-text-file-in-groovy#comment88039162_29393157
    doFirst {
        ant.replaceregexp(
            file: '.elasticbeanstalk/config.yml',
            match: 'ga-rest-api-\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}[-\\w]*\\.jar',
            replace: "ga-rest-api-${appVersion}.jar"
        )
        ant.replaceregexp(
            file: 'package.json',
            match: '"version": "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}[-\\w]*"',
            replace: '"version": "' + appVersion + '"'
        )
    }

    // bundle Elastic Beanstalk config files into the JAR
    from('.ebextensions') {
        include 'environmentvariables.config'
        include 'securitygroup-addexisting.config'
        into('.ebextensions')
    }
    inputs.files('.ebextensions') // Informs the JAR task that files in this directory should be considered inputs, thus the JAR must be rebuilt if they are modified

    manifest {
        attributes(
            "Implementation-Title": appName,
            "Implementation-Version": version
        )
    }
}

task webpack(type: Exec) {
    dependsOn 'npmInstall'

    // Tag which directories Gradle should check to determine if this task is stale (and thus should be re-built)
    inputs.dir('src/main/js')
    inputs.file('package-lock.json')
    inputs.file('package.json')
    outputs.dir('src/main/resources/static/built') // Gradle will not consider task up-to-date if a file is deleted from this dir (tested)
    outputs.dir('src/main/resources/static/css')

    executable 'npx'
    args 'webpack'
}

task cleanWebpack(type: Delete) {
    delete 'src/main/resources/static/built/'
    delete 'src/main/resources/static/css/'
}
clean.dependsOn cleanWebpack

task npmInstall(type: Exec) {
    inputs.file('package-lock.json')
    inputs.file('package.json')
    outputs.dir('node_modules')

    executable 'npm'
    args 'install'
    /* Might be required for windows:
        String npm = 'npm';
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            npm = 'npm.cmd'
        }
       See: https://stackoverflow.com/a/53428540/5271224
     */
}

task cleanNodeModules(type: Delete) {
    delete 'node_modules'
}
// Do NOT automatically run this task! // clean.dependsOn cleanNodeModules

repositories {
    mavenCentral()
//    jcenter()
    jcenter {
        // Needed for springfox @Swagger2WebMvc: https://github.com/springfox/springfox/issues/2581#issuecomment-451769249
        url "http://oss.jfrog.org/artifactory/oss-snapshot-local/"
    }
}


// Ext (extra) properties added to the project. Can be accssed in other scopes as "project.ext.myVariable"
ext {
    springStarterVersion = "2.1.3.RELEASE"
    thymeleafSecurityVersion = '3.0.4.RELEASE'
    postgresqlDriverVersion = '42.2.5'
    springfoxVersion = '3.0.0-SNAPSHOT'
    jsonpathVersion = '2.4.0'
    lombokVersion = '1.18.6'
    junitVersion = '5.3.1'
}

dependencies {
    // Spring Boot REST API
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springStarterVersion
    testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: jsonpathVersion


    // Spring frontend templating engine (Just used to launch React)
    // See: https://www.baeldung.com/spring-boot-start
    // See: https://spring.io/guides/gs/serving-web-content/
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: springStarterVersion
    compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity5', version: thymeleafSecurityVersion


    // Spring Boot Database
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest', version: springStarterVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: springStarterVersion
    compile group: 'org.postgresql', name: 'postgresql', version: postgresqlDriverVersion
    compile group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    // Spring frontend communication
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version: springStarterVersion


    // Spring Boot Security
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: springStarterVersion


    // Swagger REST API Documentation
    compile group: 'io.springfox', name: 'springfox-swagger2', version: springfoxVersion
    compile group: 'io.springfox', name: 'springfox-data-rest', version: springfoxVersion
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: springfoxVersion

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
}

// DEBUG: See: https://www.baeldung.com/junit-5-gradle
test {
    useJUnitPlatform()
    ignoreFailures = true
}

bootRun {
    doFirst {
        // Parse a credentials files on the local system with gradlew flag "-PrunLocal=true"
        // Do not perform any parsing with gradlew flag "-PrunLocal=false" or simply omit the flag
        // If you are not parsing the credentials file, you MUST specify all the ENV variables that are used by `./src/main/resources/application.properties`
        boolean doRunLocal = project.hasProperty('runLocal') ? (project.getProperty('runLocal') == 'true') : false
        if (doRunLocal) {
            // For SpringBoot's bootRun that starts a server, load a config YAML file from the .ebextensions folder as environmental variables first
            def yamlFileContents = (".ebextensions/environmentvariables.config" as File).text
            def envs = new Yaml().load(yamlFileContents)["option_settings"]["aws:elasticbeanstalk:application:environment"] as Map<String, String>
            envs.each { key, value ->
                systemProperty key, value // Gradle Task JavaExec's method for setting a ENV variable

                if (key == "RDS_HOSTNAME") {
                    println "POSTGRESQL HOSTNAME: Will be connecting to database: ${value}"
                }
            }
        }
    }
}
